.. tno.quantum.ml.classifiers.vc documentation master file, created by
   sphinx-quickstart on Mon Feb 13 10:20:56 2023.
   You can adapt this file completely to your liking, but it should at least
   contain the root `toctree` directive.

TNO Quantum
===========
TNO Quantum provides generic software components aimed at facilitating the development of quantum applications.

VC
--
VC is part of TNO Quantum and provides a Python implementation
of a Variational Quantum Classifier.

The implementation (see the :py:class:`~vc.variational_classifier.VariationalClassifier` class) has been done in accordance with
the `scikit-learn estimator API <https://scikit-learn.org/stable/developers/develop.html>`_,
which means that the classifier can be used as any other (binary and multiclass)
scikit-learn classifier and
combined with transforms through `Pipelines <https://scikit-learn.org/stable/modules/generated/sklearn.pipeline.Pipeline.html>`_.
In addition, the :py:class:`~vc.variational_classifier.VariationalClassifier` makes use of `PyTorch <https://pytorch.org/docs/stable/tensors.html>`_
tensors, optimizers, and loss functions.

Quick Install
-------------
VC can be installed using pip as follows::

    pip install tno.quantum.ml.classifiers.vc

Optionally (though required for the examples below), you can install the test datasets::

    pip install tno.quantum.ml.datasets

Example
-------
Here's an example of how the :py:class:`~vc.variational_classifier.VariationalClassifier` class can be used for
classification based on the
`Iris dataset <https://en.wikipedia.org/wiki/Iris_flower_data_set>`_:

.. code-block:: python

    from tno.quantum.ml.classifiers.vc import VariationalClassifier
    from tno.quantum.ml.datasets import get_iris_dataset

    X_training, y_training, X_validation, y_validation = get_iris_dataset()
    vc = VariationalClassifier()
    vc = vc.fit(X_training, y_training)
    predictions_validation = vc.predict(X_validation)

Backends
--------
Internally, the :py:class:`~vc.variational_classifier.VariationalClassifier` class makes use of hybrid classical/quantum
models to represent a function to be learned. These quantum models give rise to circuits
which can be run on different backends, such as quantum hardware and quantum simulators.

Backends are selected by closely following the `PennyLane <https://pennylane.ai/>`_
interface for specifying
`devices <https://docs.pennylane.ai/en/stable/introduction/circuits.html#defining-a-device>`_.
As a result, `PennyLane plugins <https://pennylane.ai/plugins.html>`_ are also supported.  
Here's an example showcasing how `Quantum Inspire <https://www.quantum-inspire.com/>`_
hardware can be used through the
`PennyLane-QuantumInspire <https://github.com/QuTech-Delft/pennylane-quantuminspire>`_ plugin (note that
you will need to install the plugin as described
`here <https://github.com/QuTech-Delft/pennylane-quantuminspire/blob/master/README.rst>`_):

.. code-block:: python

    from tno.quantum.ml.classifiers.vc import VariationalClassifier
    from tno.quantum.ml.datasets import get_wine_dataset

    X_training, y_training, X_validation, y_validation = get_wine_dataset(
        n_features=5, n_classes=3, random_seed=0
    )
    vc = VariationalClassifier(
        backend={
            "name": "quantuminspire.qi",
            "options": {"backend": "Starmon-5", "project": "my project"},
        },
    )
    vc = vc.fit(X_training, y_training)
    predictions_validation = vc.predict(X_validation)

As an alternative example, here's how the `default.qubit` simulator provided
by PennyLane can be specified by the ``backend`` keyword:

.. code-block:: python

    backend={"name": "default.qubit", "options": {}}

Quantum Models
--------------
A quantum model defines a quantum circuit and a strategy for classical post-processing
of measurements. Currently, two models are available:

* The ``"expected_values_model"``, as implemented by the :py:class:`~vc.models.ExpectedValuesModel` class
  (see :py:meth:`~vc.models.ExpectedValuesModel.get_qfunc` for details on the post-processing strategy).
* The ``"probabilities_model"``, as implemented by the :py:class:`~vc.models.ProbabilitiesModel` class
  (see :py:meth:`~vc.models.ProbabilitiesModel.get_qfunc` for details on the post-processing strategy).

For example, the ``"probabilities_model"`` can be specified with the
``model`` keyword as follows:

.. code-block:: python

    from tno.quantum.ml.classifiers.vc import VariationalClassifier
    from tno.quantum.ml.datasets import get_iris_dataset

    X_training, y_training, X_validation, y_validation = get_iris_dataset(
        n_features=4, n_classes=3, random_seed=0
    )
    vc = VariationalClassifier(
        model={
            "name": "probabilities_model",
            "options": {"n_layers": 2, "n_trainable_sublayers": 2, "scaling": 0.5},
        },
    )
    vc = vc.fit(X_training, y_training)
    predictions_validation = vc.predict(X_validation)

Developing New Quantum Models
-----------------------------
Quantum models are developed using PennyLane and can be found in the
:py:mod:`~vc.models` module.
New models can be implemented by extending from :py:class:`~vc.models.QModel`
and adding them to :py:func:`~vc.models.get_model`.

Support for PyTorch Optimizers
------------------------------
The currently supported optimizers can be found in the :py:mod:`~vc.optimizers` module.
Other PyTorch optimizers can be added in :py:func:`~vc.optimizers.get_optimizer`.

(End)use Limitations
--------------------
The content of this software may solely be used for applications that comply with international export control laws.

.. toctree::
   :maxdepth: 4
   :hidden:
   :caption: Contents

   vc
